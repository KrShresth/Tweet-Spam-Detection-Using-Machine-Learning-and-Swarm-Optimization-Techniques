{
  "cells": [
    {
      "cell_type": "code",
      "execution_count": 5,
      "id": "670ce462-2df9-4495-bee2-e4d0d47610d0",
      "metadata": {
        "id": "670ce462-2df9-4495-bee2-e4d0d47610d0",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 575
        },
        "collapsed": true,
        "outputId": "2cdc336a-ed62-40ae-b80f-42fd3cac1826"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "[nltk_data] Downloading package stopwords to /root/nltk_data...\n",
            "[nltk_data]   Unzipping corpora/stopwords.zip.\n"
          ]
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "      Id                                              Tweet  following  \\\n",
              "0  10091  It's the everything else that's complicated. #...        0.0   \n",
              "1  10172  Eren sent a glare towards Mikasa then nodded a...        0.0   \n",
              "2   7012  I posted a new photo to Facebook http://fb.me/...        0.0   \n",
              "3   3697  #jan Idiot Chelsea Handler Diagnoses Trump Wit...     3319.0   \n",
              "4  10740  Pedophile Anthony Weiner is TERRIFIED of Getti...     4840.0   \n",
              "\n",
              "   followers  actions  is_retweet                  location     Type  \n",
              "0    11500.0      NaN         0.0                   Chicago  Quality  \n",
              "1        0.0      NaN         0.0                       NaN  Quality  \n",
              "2        0.0      NaN         0.0             Scotland, U.K  Quality  \n",
              "3      611.0    294.0         0.0          FBBIGBANG&2NE1TH     Spam  \n",
              "4     1724.0   1522.0         0.0  www.instagram.com/fender     Spam  "
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-c912a085-768a-42e6-a32a-df33a927e4e7\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Id</th>\n",
              "      <th>Tweet</th>\n",
              "      <th>following</th>\n",
              "      <th>followers</th>\n",
              "      <th>actions</th>\n",
              "      <th>is_retweet</th>\n",
              "      <th>location</th>\n",
              "      <th>Type</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>10091</td>\n",
              "      <td>It's the everything else that's complicated. #...</td>\n",
              "      <td>0.0</td>\n",
              "      <td>11500.0</td>\n",
              "      <td>NaN</td>\n",
              "      <td>0.0</td>\n",
              "      <td>Chicago</td>\n",
              "      <td>Quality</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>10172</td>\n",
              "      <td>Eren sent a glare towards Mikasa then nodded a...</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>NaN</td>\n",
              "      <td>0.0</td>\n",
              "      <td>NaN</td>\n",
              "      <td>Quality</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>7012</td>\n",
              "      <td>I posted a new photo to Facebook http://fb.me/...</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>NaN</td>\n",
              "      <td>0.0</td>\n",
              "      <td>Scotland, U.K</td>\n",
              "      <td>Quality</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>3697</td>\n",
              "      <td>#jan Idiot Chelsea Handler Diagnoses Trump Wit...</td>\n",
              "      <td>3319.0</td>\n",
              "      <td>611.0</td>\n",
              "      <td>294.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>FBBIGBANG&amp;2NE1TH</td>\n",
              "      <td>Spam</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>10740</td>\n",
              "      <td>Pedophile Anthony Weiner is TERRIFIED of Getti...</td>\n",
              "      <td>4840.0</td>\n",
              "      <td>1724.0</td>\n",
              "      <td>1522.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>www.instagram.com/fender</td>\n",
              "      <td>Spam</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-c912a085-768a-42e6-a32a-df33a927e4e7')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-c912a085-768a-42e6-a32a-df33a927e4e7 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-c912a085-768a-42e6-a32a-df33a927e4e7');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-0dcdef8a-5fe3-497a-9985-5fda55f04876\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-0dcdef8a-5fe3-497a-9985-5fda55f04876')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-0dcdef8a-5fe3-497a-9985-5fda55f04876 button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "variable_name": "df",
              "summary": "{\n  \"name\": \"df\",\n  \"rows\": 11968,\n  \"fields\": [\n    {\n      \"column\": \"Id\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 3632,\n        \"min\": 1,\n        \"max\": 12598,\n        \"num_unique_values\": 11968,\n        \"samples\": [\n          8689,\n          7720,\n          3056\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Tweet\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 11787,\n        \"samples\": [\n          \"Espargaro: Ducati have the upper hand: Monster Tech 3 Yamaha's Pol Espargaro says Ducati's outright speed at ... http://bit.ly/1OBKNl3\",\n          \"3 teens from Brooklyn charged in raping of woman, 33\",\n          \"Everything is finished and ready to go. Now to pack!#colordashfabric https://www.instagram.com/p/BFg0ZkYIz_s/\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"following\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 31582.890372393435,\n        \"min\": 0.0,\n        \"max\": 1600000.0,\n        \"num_unique_values\": 3888,\n        \"samples\": [\n          4966.0,\n          343.0,\n          11655.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"followers\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 3973313.6794361463,\n        \"min\": 0.0,\n        \"max\": 105000000.0,\n        \"num_unique_values\": 4754,\n        \"samples\": [\n          513.0,\n          423000.0,\n          3202.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"actions\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 16468.215132303172,\n        \"min\": 0.0,\n        \"max\": 165865.0,\n        \"num_unique_values\": 5124,\n        \"samples\": [\n          1428.0,\n          4555.0,\n          6547.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"is_retweet\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.4169058364215849,\n        \"min\": 0.0,\n        \"max\": 1.0,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          1.0,\n          0.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"location\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 2893,\n        \"samples\": [\n          \"Asheville, North Carolina\",\n          \"Arlington, TX\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Type\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 2,\n        \"samples\": [\n          \"Spam\",\n          \"Quality\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {},
          "execution_count": 5
        }
      ],
      "source": [
        "import pandas as pd\n",
        "import numpy as np\n",
        "import nltk\n",
        "nltk.download('stopwords')\n",
        "df = pd.read_csv('data_train.csv')\n",
        "\n",
        "df.head()"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 6,
      "id": "492cb9e4-64f9-4e18-aff0-90ca8f8a68fa",
      "metadata": {
        "id": "492cb9e4-64f9-4e18-aff0-90ca8f8a68fa",
        "outputId": "c547f263-207f-4230-e37a-f8d7f2dd3332",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "collapsed": true
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "      Id                                              Tweet  following  \\\n",
            "0  10091  It's the everything else that's complicated. #...        0.0   \n",
            "1  10172  Eren sent a glare towards Mikasa then nodded a...        0.0   \n",
            "2   7012  I posted a new photo to Facebook http://fb.me/...        0.0   \n",
            "3   3697  #jan Idiot Chelsea Handler Diagnoses Trump Wit...     3319.0   \n",
            "4  10740  Pedophile Anthony Weiner is TERRIFIED of Getti...     4840.0   \n",
            "\n",
            "   followers  actions  is_retweet                  location  Type  \n",
            "0    11500.0      0.0         0.0                   Chicago     0  \n",
            "1        0.0      0.0         0.0                       NaN     0  \n",
            "2        0.0      0.0         0.0             Scotland, U.K     0  \n",
            "3      611.0    294.0         0.0          FBBIGBANG&2NE1TH     1  \n",
            "4     1724.0   1522.0         0.0  www.instagram.com/fender     1  \n"
          ]
        }
      ],
      "source": [
        "# df Preprocessing\n",
        "\n",
        "# Fill missing values\n",
        "df['following'] = df['following'].fillna(0)\n",
        "df['followers'] = df['followers'].fillna(0)\n",
        "df['actions'] = df['actions'].fillna(0)\n",
        "df['is_retweet'] = df['is_retweet'].fillna(0)\n",
        "\n",
        "\n",
        "# Encode the target variable (Type)\n",
        "df['Type'] = df['Type'].map({'Spam': 1, 'Quality': 0})\n",
        "print(df.head())"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 7,
      "id": "193434bc-993c-413d-8632-28b8c66af95b",
      "metadata": {
        "id": "193434bc-993c-413d-8632-28b8c66af95b",
        "outputId": "7eecc416-299f-4b35-c537-302ded5ff229",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "collapsed": true
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "      Id                                              Tweet  following  \\\n",
            "0  10091  It's the everything else that's complicated. #...        0.0   \n",
            "1  10172  Eren sent a glare towards Mikasa then nodded a...        0.0   \n",
            "2   7012  I posted a new photo to Facebook http://fb.me/...        0.0   \n",
            "3   3697  #jan Idiot Chelsea Handler Diagnoses Trump Wit...     3319.0   \n",
            "4  10740  Pedophile Anthony Weiner is TERRIFIED of Getti...     4840.0   \n",
            "5   9572  EBMUD ending penalties for excessive water use...     4435.0   \n",
            "6  10792  Big day.  #WeTheNorth #yyz #thesix #sunset #sk...        0.0   \n",
            "7  11594  #UPA #scams to the tune of Rs 12 lakh Crore #S...        0.0   \n",
            "8  12594  **MISSING**\\nA male tabby cat has gone missing...    39000.0   \n",
            "\n",
            "   followers  actions  is_retweet                  location  Type  \\\n",
            "0    11500.0      0.0         0.0                   Chicago     0   \n",
            "1        0.0      0.0         0.0                       NaN     0   \n",
            "2        0.0      0.0         0.0             Scotland, U.K     0   \n",
            "3      611.0    294.0         0.0          FBBIGBANG&2NE1TH     1   \n",
            "4     1724.0   1522.0         0.0  www.instagram.com/fender     1   \n",
            "5    16041.0  27750.0         0.0         Noida, NCR, India     1   \n",
            "6        0.0      0.0         0.0               Toronto, ON     0   \n",
            "7   193000.0      0.0         0.0                    Mumbai     0   \n",
            "8    46900.0     47.0         0.0                        UK     0   \n",
            "\n",
            "   tweet_length  hashtag_count  mention_count  url_count  capitalized_count  \\\n",
            "0            84              2              0          0                 12   \n",
            "1           139              0              1          0                  5   \n",
            "2            55              0              0          1                  5   \n",
            "3           105              1              0          2                 17   \n",
            "4            92              0              0          1                 19   \n",
            "5            72              0              0          1                 11   \n",
            "6           102              5              1          1                 11   \n",
            "7           138              3              2          0                 22   \n",
            "8           172              1              0          1                 16   \n",
            "\n",
            "   exclamation_count  question_mark_count  \\\n",
            "0                  0                    0   \n",
            "1                  0                    0   \n",
            "2                  0                    0   \n",
            "3                  0                    0   \n",
            "4                  0                    0   \n",
            "5                  0                    0   \n",
            "6                  0                    0   \n",
            "7                  1                    0   \n",
            "8                  1                    0   \n",
            "\n",
            "                                       cleaned_tweet  \n",
            "0  everything else thats complicated twittercomjs...  \n",
            "1  eren sent glare towards mikasa nodded stood go...  \n",
            "2                          posted new photo facebook  \n",
            "3      idiot chelsea handler diagnoses trump disease  \n",
            "4  pedophile anthony weiner terrified getting bea...  \n",
            "5       ebmud ending penalties excessive water users  \n",
            "6                                        big day six  \n",
            "7  tune rs lakh crore congress conning india sinc...  \n",
            "8  missing male tabby cat gone missing n area ple...  \n"
          ]
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "((9574, 511), (2394, 511), (9574,), (2394,))"
            ]
          },
          "metadata": {},
          "execution_count": 7
        }
      ],
      "source": [
        "from sklearn.model_selection import train_test_split\n",
        "from sklearn.feature_extraction.text import TfidfVectorizer\n",
        "import re\n",
        "import nltk\n",
        "from nltk.corpus import stopwords\n",
        "\n",
        "#nltk.download('stopwords')\n",
        "STOPWORDS = set(stopwords.words('english'))\n",
        "# Convert the 'Tweet' col to string and handle non-string entries\n",
        "df['Tweet'] = df['Tweet'].astype(str)\n",
        "\n",
        "# extract features now that all entries are strings\n",
        "df['tweet_length'] = df['Tweet'].apply(len)  # Length of the tweet\n",
        "df['hashtag_count'] = df['Tweet'].apply(lambda x: x.count('#'))\n",
        "df['mention_count'] = df['Tweet'].apply(lambda x: x.count('@'))\n",
        "df['url_count'] = df['Tweet'].apply(lambda x: x.count('http'))\n",
        "df['capitalized_count'] = df['Tweet'].apply(lambda x: sum(1 for c in x if c.isupper()))\n",
        "df['exclamation_count'] = df['Tweet'].apply(lambda x: x.count('!'))\n",
        "df['question_mark_count'] = df['Tweet'].apply(lambda x: x.count('?'))\n",
        "\n",
        "\n",
        "def clean_text(text):\n",
        "    text = re.sub(r\"http\\S+\", \"\", text)  # Remove URLs\n",
        "    text = re.sub(r\"@\\w+\", \"\", text)     # Remove mentions\n",
        "    text = re.sub(r\"#\\w+\", \"\", text)     # Remove hashtags\n",
        "    text = re.sub(r\"[^a-zA-Z\\s]\", \"\", text)  # Remove special characters\n",
        "    text = text.lower()  # Convert to lowercase\n",
        "    text = \" \".join([word for word in text.split() if word not in STOPWORDS])  # Remove stopwords\n",
        "    return text\n",
        "\n",
        "df['cleaned_tweet'] = df['Tweet'].astype(str).apply(clean_text)\n",
        "vectorizer = TfidfVectorizer(max_features=500)\n",
        "X_text_feature = vectorizer.fit_transform(df['cleaned_tweet']).toarray()  # Convert to array\n",
        "\n",
        "print(df.head(9))\n",
        "df.to_csv('preprocessed_data.csv', index=False)\n",
        "X_meta_features = df[['following', 'followers', 'actions', 'is_retweet', 'tweet_length',\n",
        "                      'hashtag_count', 'mention_count', 'url_count',\n",
        "                      'capitalized_count', 'exclamation_count', 'question_mark_count']]\n",
        "\n",
        "# Step 3: Combine both sets of features (NLP + Metaheuristic)\n",
        "X_combined = np.hstack((X_text_feature, X_meta_features.values))\n",
        "y = df['Type']\n",
        "\n",
        "# Step 4: Train-Test Split\n",
        "X_train, X_test, y_train, y_test = train_test_split(X_combined, y, test_size=0.2, random_state=42)\n",
        "\n",
        "\n",
        "# Display the shape of the training and testing sets\n",
        "X_train.shape, X_test.shape, y_train.shape, y_test.shape"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 9,
      "id": "0f6e4926-e505-493b-855a-d48dac16c69c",
      "metadata": {
        "id": "0f6e4926-e505-493b-855a-d48dac16c69c"
      },
      "outputs": [],
      "source": [
        "# Whale Optimization Algorithm for feature selection\n",
        "class WhaleOptimizationAlgorithm:\n",
        "    def __init__(self, X, y, num_whales=30, max_iter=2):\n",
        "        self.X = X\n",
        "        self.y = y\n",
        "        self.num_whales = num_whales\n",
        "        self.max_iter = \"max_iter\"\n",
        "        self.best_features = None\n",
        "        self.best_score = 0\n",
        "\n",
        "    def fitness(self, features):\n",
        "        # Train a classifier and return the accuracy\n",
        "        if np.sum(features) == 0:\n",
        "            return 0  # Avoid empty feature sets\n",
        "        X_subset = self.X[:, features.astype(bool)]\n",
        "        X_train, X_test, y_train, y_test = train_test_split(X_subset, self.y, test_size=0.2, random_state=42)\n",
        "        model = AdaBoostClassifier()\n",
        "        model.fit(X_train, y_train)\n",
        "        y_pred = model.predict(X_test)\n",
        "        return accuracy_score(y_test, y_pred)\n",
        "\n",
        "    def optimize(self):\n",
        "    # Initialize positions of whales\n",
        "      positions = np.random.rand(self.num_whales, self.X.shape[1])\n",
        "      for iteration in range(self.max_iter):\n",
        "        print(f\"Iteration {iteration + 1}/{self.max_iter}\")\n",
        "        for i in range(self.num_whales):\n",
        "            # Calculate fitness\n",
        "            score = self.fitness(positions[i])\n",
        "            if score > self.best_score:\n",
        "                self.best_score = score\n",
        "                self.best_features = positions[i]\n",
        "        # Update positions (simplified version of WOA)\n",
        "        positions += np.random.rand(self.num_whales, self.X.shape[1]) * 0.1\n",
        "      return self.best_features\n"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "class WhaleOptimizationAlgorithm:\n",
        "    def __init__(self, X, y, num_whales=30, max_iter=2):\n",
        "        self.X = X\n",
        "        self.y = y\n",
        "        self.num_whales = num_whales\n",
        "        self.max_iter = max_iter # Changed: Assign the integer value of max_iter\n",
        "        self.best_features = None\n",
        "        self.best_score = 0\n",
        "\n",
        "    def fitness(self, features):\n",
        "        # Train a classifier and return the accuracy\n",
        "        if np.sum(features) == 0:\n",
        "            return 0  # Avoid empty feature sets\n",
        "        X_subset = self.X[:, features.astype(bool)]\n",
        "        X_train, X_test, y_train, y_test = train_test_split(X_subset, self.y, test_size=0.2, random_state=42)\n",
        "        model = AdaBoostClassifier()\n",
        "        model.fit(X_train, y_train)\n",
        "        y_pred = model.predict(X_test)\n",
        "        return accuracy_score(y_test, y_pred)\n",
        "\n",
        "    def optimize(self):\n",
        "    # Initialize positions of whales\n",
        "      positions = np.random.rand(self.num_whales, self.X.shape[1])\n",
        "      for iteration in range(self.max_iter):\n",
        "        print(f\"Iteration {iteration + 1}/{self.max_iter}\")\n",
        "        for i in range(self.num_whales):\n",
        "            # Calculate fitness\n",
        "            score = self.fitness(positions[i])\n",
        "            if score > self.best_score:\n",
        "                self.best_score = score\n",
        "                self.best_features = positions[i]\n",
        "        # Update positions (simplified version of WOA)\n",
        "        positions += np.random.rand(self.num_whales, self.X.shape[1]) * 0.1\n",
        "      return self.best_features"
      ],
      "metadata": {
        "id": "fWraUyCSX8pV"
      },
      "id": "fWraUyCSX8pV",
      "execution_count": 15,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# Adding new tweets to the existing DataFrame `df` within the Jupyter notebook file and re-running preprocessing.\n",
        "# This assumes that `df` already exists in the notebook environment.\n",
        "additional_tweets = [\n",
        "    {\"Id\": 20011, \"Tweet\": \"Discover amazing deals on our site today! Limited time offer.\", \"following\": 120, \"followers\": 3400, \"actions\": 3, \"is_retweet\": 0, \"location\": \"New York\", \"Type\": 1},\n",
        "    {\"Id\": 20012, \"Tweet\": \"Had a great time at the tech conference! #Innovation #TechTrends\", \"following\": 50, \"followers\": 1800, \"actions\": 10, \"is_retweet\": 0, \"location\": \"San Francisco\", \"Type\": 0},\n",
        "    {\"Id\": 20013, \"Tweet\": \"Our biggest sale of the year is here! Shop now before it's gone.\", \"following\": 400, \"followers\": 22000, \"actions\": 15, \"is_retweet\": 0, \"location\": \"Online\", \"Type\": 1},\n",
        "    {\"Id\": 20014, \"Tweet\": \"New blog: 'Top 10 Travel Destinations for 2023' - Check it out!\", \"following\": 80, \"followers\": 2500, \"actions\": 1, \"is_retweet\": 0, \"location\": \"Los Angeles\", \"Type\": 0},\n",
        "    {\"Id\": 20015, \"Tweet\": \"Proud of our team’s recent achievements #TeamGoals #Success\", \"following\": 60, \"followers\": 900, \"actions\": 7, \"is_retweet\": 0, \"location\": \"Chicago\", \"Type\": 0},\n",
        "    {\"Id\": 20016, \"Tweet\": \"Flash sale on our winter collection! Get up to 70% off.\", \"following\": 320, \"followers\": 16000, \"actions\": 12, \"is_retweet\": 0, \"location\": \"New York\", \"Type\": 1},\n",
        "    {\"Id\": 20017, \"Tweet\": \"Check out the new feature on our app for faster transactions.\", \"following\": 90, \"followers\": 1100, \"actions\": 3, \"is_retweet\": 0, \"location\": \"Boston\", \"Type\": 0},\n",
        "    {\"Id\": 20018, \"Tweet\": \"Our experts share top tips for healthy living. Learn more!\", \"following\": 200, \"followers\": 3000, \"actions\": 4, \"is_retweet\": 0, \"location\": \"San Diego\", \"Type\": 0},\n",
        "    {\"Id\": 20019, \"Tweet\": \"Last chance! Register now for early bird discounts on tickets.\", \"following\": 500, \"followers\": 4500, \"actions\": 10, \"is_retweet\": 0, \"location\": \"Seattle\", \"Type\": 1},\n",
        "    {\"Id\": 20020, \"Tweet\": \"Big things are coming. Stay tuned for exciting announcements!\", \"following\": 70, \"followers\": 4000, \"actions\": 5, \"is_retweet\": 0, \"location\": \"Miami\", \"Type\": 0},\n",
        "    {\"Id\": 20021, \"Tweet\": \"Get inspired with our new DIY project ideas on our blog.\", \"following\": 150, \"followers\": 600, \"actions\": 0, \"is_retweet\": 0, \"location\": \"Austin\", \"Type\": 0},\n",
        "    {\"Id\": 20022, \"Tweet\": \"Hurry! Limited stock available on selected products.\", \"following\": 380, \"followers\": 14000, \"actions\": 8, \"is_retweet\": 0, \"location\": \"Online\", \"Type\": 1},\n",
        "    {\"Id\": 20023, \"Tweet\": \"Here's how to make the most of your workout routines #Fitness\", \"following\": 210, \"followers\": 2500, \"actions\": 3, \"is_retweet\": 0, \"location\": \"Denver\", \"Type\": 0},\n",
        "    {\"Id\": 20024, \"Tweet\": \"Sneak peek of our new collection launching next month!\", \"following\": 170, \"followers\": 3300, \"actions\": 6, \"is_retweet\": 0, \"location\": \"Chicago\", \"Type\": 1},\n",
        "    {\"Id\": 20025, \"Tweet\": \"Excited to partner with industry leaders on innovative solutions!\", \"following\": 60, \"followers\": 1800, \"actions\": 4, \"is_retweet\": 0, \"location\": \"San Jose\", \"Type\": 0},\n",
        "    {\"Id\": 20026, \"Tweet\": \"Save the date! Join us for an exclusive webinar next week.\", \"following\": 500, \"followers\": 5000, \"actions\": 8, \"is_retweet\": 0, \"location\": \"Online\", \"Type\": 1},\n",
        "    {\"Id\": 20027, \"Tweet\": \"Our holiday collection is out now! Perfect gifts for loved ones.\", \"following\": 140, \"followers\": 9000, \"actions\": 9, \"is_retweet\": 0, \"location\": \"Houston\", \"Type\": 1},\n",
        "    {\"Id\": 20028, \"Tweet\": \"Free workshop: Learn how to manage stress effectively\", \"following\": 110, \"followers\": 700, \"actions\": 0, \"is_retweet\": 0, \"location\": \"Portland\", \"Type\": 0},\n",
        "    {\"Id\": 20029, \"Tweet\": \"New product alert! Discover the latest in tech gadgets.\", \"following\": 310, \"followers\": 14000, \"actions\": 7, \"is_retweet\": 0, \"location\": \"San Francisco\", \"Type\": 1},\n",
        "    {\"Id\": 20030, \"Tweet\": \"Can't wait to share some exciting news with you all soon!\", \"following\": 90, \"followers\": 4000, \"actions\": 2, \"is_retweet\": 0, \"location\": \"Seattle\", \"Type\": 0},\n",
        "    {\"Id\": 20031, \"Tweet\": \"Congratulations to our employee of the month! #TeamAppreciation\", \"following\": 80, \"followers\": 900, \"actions\": 6, \"is_retweet\": 0, \"location\": \"Los Angeles\", \"Type\": 0},\n",
        "]\n",
        "# Convert additional tweets to a DataFrame\n",
        "new_tweets_df = pd.DataFrame(additional_tweets)\n",
        "# Assuming `df` is the existing DataFrame in the notebook environment\n",
        "# Concatenate with the original DataFrame\n",
        "df = pd.concat([df, new_tweets_df], ignore_index=True)\n",
        "# Re-run preprocessing if required\n",
        "df['cleaned_tweet'] = df['Tweet'].astype(str).apply(clean_text)\n"
      ],
      "metadata": {
        "id": "EgGzJmcVFtHz"
      },
      "id": "EgGzJmcVFtHz",
      "execution_count": 16,
      "outputs": []
    },
    {
      "cell_type": "code",
      "execution_count": 17,
      "id": "2479558f-1d69-46fa-a6b8-63d0795bf7e3",
      "metadata": {
        "id": "2479558f-1d69-46fa-a6b8-63d0795bf7e3",
        "outputId": "d6e1dfba-a2e8-45e9-f076-f5fbcb17d03c",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "collapsed": true
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Iteration 1/2\n",
            "Iteration 2/2\n",
            "Accuracy: 0.9970760233918129\n"
          ]
        }
      ],
      "source": [
        "import warnings\n",
        "from sklearn.ensemble import AdaBoostClassifier\n",
        "from sklearn.metrics import accuracy_score\n",
        "# Suppress FutureWarnings\n",
        "warnings.filterwarnings(\"ignore\", category=FutureWarning)\n",
        "\n",
        "# Run the Whale Optimization Algorithm\n",
        "woa = WhaleOptimizationAlgorithm(X_train, y_train)\n",
        "best_features = woa.optimize()\n",
        "\n",
        "# Train the AdaBoost classifier on the selected features\n",
        "X_train_selected = X_train[:, best_features.astype(bool)]\n",
        "X_test_selected = X_test[:, best_features.astype(bool)]\n",
        "model = AdaBoostClassifier(algorithm='SAMME')  # Explicitly using SAMME\n",
        "model.fit(X_train_selected, y_train)\n",
        "y_pred = model.predict(X_test_selected)\n",
        "print(\"Accuracy:\", accuracy_score(y_test, y_pred))"
      ]
    },
    {
      "cell_type": "code",
      "source": [],
      "metadata": {
        "id": "f9cjbkzwGA0l"
      },
      "id": "f9cjbkzwGA0l",
      "execution_count": null,
      "outputs": []
    }
  ],
  "metadata": {
    "kernelspec": {
      "display_name": "Python 3 (ipykernel)",
      "language": "python",
      "name": "python3"
    },
    "language_info": {
      "codemirror_mode": {
        "name": "ipython",
        "version": 3
      },
      "file_extension": ".py",
      "mimetype": "text/x-python",
      "name": "python",
      "nbconvert_exporter": "python",
      "pygments_lexer": "ipython3",
      "version": "3.12.0"
    },
    "colab": {
      "provenance": []
    }
  },
  "nbformat": 4,
  "nbformat_minor": 5
}
